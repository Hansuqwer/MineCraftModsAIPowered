import 'package:flutter/material.dart';
import '../services/ai_service.dart';
import '../services/enhanced_ai_service.dart';
import '../services/speech_service.dart';
import '../services/tts_service.dart';
import '../services/app_localizations.dart';
import '../models/conversation.dart';
import '../models/enhanced_creature_attributes.dart';
import 'advanced_customization_screen.dart';

/// Simple Creator Screen - Fully scrollable with Swedish support
class CreatorScreenSimple extends StatefulWidget {
  const CreatorScreenSimple({super.key});

  @override
  State<CreatorScreenSimple> createState() => _CreatorScreenSimpleState();
}

class _CreatorScreenSimpleState extends State<CreatorScreenSimple> with SingleTickerProviderStateMixin {
  final AIService _aiService = AIService();
  final SpeechService _speechService = SpeechService();
  final TTSService _ttsService = TTSService();
  final TextEditingController _textController = TextEditingController();

  String _recognizedText = '';
  bool _isListening = false;
  bool _isProcessing = false;
  Conversation _conversation = Conversation(messages: []);
  EnhancedCreatureAttributes? _currentCreature;

  // Animation for Send button
  late AnimationController _sendButtonController;
  late Animation<double> _sendButtonAnimation;

  @override
  void initState() {
    super.initState();
    _initializeServices();
    _initializeAnimations();
  }

  void _initializeAnimations() {
    _sendButtonController = AnimationController(
      duration: const Duration(milliseconds: 150),
      vsync: this,
    );
    _sendButtonAnimation = Tween<double>(begin: 1.0, end: 0.95).animate(
      CurvedAnimation(parent: _sendButtonController, curve: Curves.easeInOut),
    );
  }

  Future<void> _initializeServices() async {
    await _speechService.initialize();
    await _ttsService.initialize();

    // Play warm welcome after a short delay
    Future.delayed(const Duration(seconds: 1), () {
      _ttsService.playWarmWelcome();
    });
  }

  Future<void> _startListening() async {
    if (_isListening) return;

    setState(() => _isListening = true);

    await _speechService.startListening(
      onResult: (text) {
        setState(() => _recognizedText = text);
      },
      onError: (error) {
        print('Speech error: $error');
        setState(() => _isListening = false);
      },
    );
  }

  Future<void> _stopListening() async {
    if (!_isListening) return;

    await _speechService.stopListening();
    setState(() => _isListening = false);

    if (_recognizedText.isNotEmpty) {
      await _processTextInput(_recognizedText);
    }
  }

  Future<void> _processTextInput(String text) async {
    if (text.trim().isEmpty) return;

    // Animate send button
    _sendButtonController.forward().then((_) => _sendButtonController.reverse());

    setState(() {
      _isProcessing = true;
      _textController.clear();
    });

    try {
      // Add user message to conversation
      _conversation = _conversation.addMessage(text, true);

      // Get enhanced AI response with advanced attributes
      final enhancedAttributes = await EnhancedAIService.parseEnhancedCreatureRequest(text);

      setState(() {
        _currentCreature = enhancedAttributes;
        _conversation = _conversation.addMessage(
          'I created ${enhancedAttributes.customName}! ${enhancedAttributes.fullDescription}',
          false
        );
      });

      // Speak the response with personality
      await _ttsService.speak('I created ${enhancedAttributes.customName}! ${enhancedAttributes.fullDescription}');

      // Add some encouragement
      await Future.delayed(const Duration(milliseconds: 500));
      await _ttsService.playEncouragement();

      setState(() {
        _isProcessing = false;
        _recognizedText = '';
      });

    } catch (e) {
      print('Error processing text: $e');
      setState(() => _isProcessing = false);
    }
  }

  Future<void> _openAdvancedCustomization() async {
    if (_currentCreature == null) return;

    final result = await Navigator.push<EnhancedCreatureAttributes>(
      context,
      MaterialPageRoute(
        builder: (context) => AdvancedCustomizationScreen(
          initialAttributes: _currentCreature!,
          onAttributesChanged: (attributes) {
            setState(() {
              _currentCreature = attributes;
            });
          },
        ),
      ),
    );

    if (result != null) {
      setState(() {
        _currentCreature = result;
      });

      // Update conversation with new attributes
      _conversation = _conversation.addMessage(
        'Updated ${result.customName}! ${result.fullDescription}',
        false,
      );

      // Speak the update
      await _ttsService.speak('Updated ${result.customName}! ${result.fullDescription}');
    }
  }

  @override
  void dispose() {
    _sendButtonController.dispose();
    _textController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final l10n = AppLocalizations.of(context);

    return Scaffold(
      backgroundColor: const Color(0xFFFFF9F0),
      appBar: AppBar(
        backgroundColor: const Color(0xFFFF6B9D),
        title: Text(
          l10n.creatorTitle,
          style: const TextStyle(color: Colors.white, fontWeight: FontWeight.w600),
        ),
        leading: IconButton(
          icon: const Icon(Icons.arrow_back, color: Colors.white),
          onPressed: () => Navigator.pop(context),
        ),
      ),
      body: SafeArea(
        child: SingleChildScrollView(
          padding: const EdgeInsets.all(24.0),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              // Crafta Avatar
              Container(
                width: 120,
                height: 120,
                decoration: const BoxDecoration(
                  color: Color(0xFF98D8C8),
                  shape: BoxShape.circle,
                ),
                child: const Icon(
                  Icons.auto_awesome,
                  size: 60,
                  color: Colors.white,
                ),
              ),
              const SizedBox(height: 24),

              // Speech Bubble
              Container(
                padding: const EdgeInsets.all(16),
                decoration: BoxDecoration(
                  color: Colors.white,
                  borderRadius: BorderRadius.circular(20),
                  boxShadow: [
                    BoxShadow(
                      color: Colors.black.withOpacity(0.1),
                      blurRadius: 10,
                      offset: const Offset(0, 2),
                    ),
                  ],
                ),
                child: Text(
                  _recognizedText.isEmpty
                    ? l10n.craftaGreeting
                    : _recognizedText,
                  style: TextStyle(
                    fontSize: 16,
                    color: _recognizedText.isEmpty
                      ? const Color(0xFF333333)
                      : const Color(0xFF666666),
                  ),
                  textAlign: TextAlign.center,
                ),
              ),

              const SizedBox(height: 32),

              // Microphone Button
              GestureDetector(
                onTapDown: (_) => _startListening(),
                onTapUp: (_) => _stopListening(),
                onTapCancel: () => _stopListening(),
                child: Container(
                  width: 120,
                  height: 120,
                  decoration: BoxDecoration(
                    color: _isListening
                      ? const Color(0xFFFF6B9D)
                      : const Color(0xFF98D8C8),
                    shape: BoxShape.circle,
                    boxShadow: [
                      BoxShadow(
                        color: (_isListening
                          ? const Color(0xFFFF6B9D)
                          : const Color(0xFF98D8C8)).withOpacity(0.4),
                        blurRadius: 12,
                        offset: const Offset(0, 4),
                      ),
                    ],
                  ),
                  child: Icon(
                    _isListening ? Icons.mic : Icons.mic_none,
                    size: 48,
                    color: Colors.white,
                  ),
                ),
              ),

              const SizedBox(height: 16),

              // Status Text
              Text(
                _isListening
                  ? l10n.tapAndHold
                  : l10n.tapToSpeak,
                style: const TextStyle(
                  fontSize: 16,
                  color: Color(0xFF666666),
                ),
                textAlign: TextAlign.center,
              ),

              const SizedBox(height: 32),

              // Text Input Alternative
              Container(
                padding: const EdgeInsets.all(16),
                decoration: BoxDecoration(
                  color: Colors.white,
                  borderRadius: BorderRadius.circular(12),
                  border: Border.all(color: const Color(0xFFE0E0E0)),
                ),
                child: Column(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    Text(
                      l10n.orTypeMessage,
                      style: const TextStyle(
                        fontSize: 14,
                        color: Color(0xFF666666),
                      ),
                    ),
                    const SizedBox(height: 8),
                    TextField(
                      controller: _textController,
                      decoration: InputDecoration(
                        hintText: l10n.typeHere,
                        border: const OutlineInputBorder(),
                        contentPadding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
                      ),
                      onSubmitted: _processTextInput,
                    ),
                    const SizedBox(height: 8),
                    AnimatedBuilder(
                      animation: _sendButtonAnimation,
                      builder: (context, child) {
                        return Transform.scale(
                          scale: _sendButtonAnimation.value,
                          child: ElevatedButton.icon(
                            onPressed: () => _processTextInput(_textController.text),
                            icon: const Icon(Icons.send, size: 18),
                            label: Text(l10n.send),
                            style: ElevatedButton.styleFrom(
                              backgroundColor: const Color(0xFF98D8C8),
                              foregroundColor: Colors.white,
                              padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 12),
                            ),
                          ),
                        );
                      },
                    ),
                  ],
                ),
              ),

              const SizedBox(height: 16),

              // Advanced Customization Button
              if (_currentCreature != null)
                Container(
                  width: double.infinity,
                  padding: const EdgeInsets.all(16),
                  decoration: BoxDecoration(
                    color: const Color(0xFF98D8C8).withOpacity(0.1),
                    borderRadius: BorderRadius.circular(12),
                    border: Border.all(color: const Color(0xFF98D8C8)),
                  ),
                  child: Column(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      Text(
                        l10n.advancedCustomizationAvailable,
                        style: const TextStyle(
                          fontSize: 16,
                          fontWeight: FontWeight.bold,
                          color: Color(0xFF98D8C8),
                        ),
                        textAlign: TextAlign.center,
                      ),
                      const SizedBox(height: 8),
                      Text(
                        l10n.customizeOptions,
                        style: const TextStyle(
                          fontSize: 14,
                          color: Color(0xFF666666),
                        ),
                        textAlign: TextAlign.center,
                      ),
                      const SizedBox(height: 12),
                      ElevatedButton.icon(
                        onPressed: () => _openAdvancedCustomization(),
                        icon: const Icon(Icons.palette, color: Colors.white),
                        label: Text(l10n.customize, style: const TextStyle(color: Colors.white)),
                        style: ElevatedButton.styleFrom(
                          backgroundColor: const Color(0xFF98D8C8),
                          foregroundColor: Colors.white,
                        ),
                      ),
                    ],
                  ),
                ),

              if (_isProcessing) ...[
                const SizedBox(height: 24),
                const CircularProgressIndicator(
                  valueColor: AlwaysStoppedAnimation<Color>(Color(0xFF98D8C8)),
                ),
                const SizedBox(height: 8),
                Text(
                  l10n.creating,
                  style: const TextStyle(
                    fontSize: 16,
                    color: Color(0xFF666666),
                  ),
                ),
              ],

              // Extra padding at bottom for scrolling
              const SizedBox(height: 40),
            ],
          ),
        ),
      ),
    );
  }
}
